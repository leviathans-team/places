basePath: /
definitions:
  golang-pkg_internal_auth.BusinessUserForRegister:
    properties:
      email:
        type: string
      inn:
        type: string
      legalEntity:
        type: string
      name:
        type: string
      password:
        type: string
      patronymic:
        type: string
      phone:
        type: string
      post:
        type: string
      surname:
        type: string
    required:
    - email
    - inn
    - legalEntity
    - name
    - password
    - phone
    - post
    - surname
    type: object
  golang-pkg_internal_auth.UserForLogin:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  golang-pkg_internal_auth.UserForRegister:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      patronymic:
        type: string
      phone:
        type: string
      surname:
        type: string
    required:
    - email
    - name
    - password
    - phone
    - surname
    type: object
  golang-pkg_internal_places.Approving:
    properties:
      adminId:
        type: integer
      placeId:
        type: integer
    type: object
  golang-pkg_internal_places.Calendar:
    properties:
      bookId:
        type: integer
      placeId:
        type: integer
      timeFrom:
        type: string
      timeTo:
        type: string
      userId:
        type: integer
    type: object
  golang-pkg_internal_places.Comment:
    properties:
      comment:
        type: string
      commentId:
        type: integer
      mark:
        type: number
      placeId:
        type: integer
      userId:
        type: integer
    type: object
  golang-pkg_internal_places.CommentMessage:
    properties:
      mark:
        type: number
      message:
        type: string
    type: object
  golang-pkg_internal_places.Filter:
    properties:
      filterId:
        type: integer
      filterName:
        type: string
    type: object
  golang-pkg_internal_places.LandPlace:
    properties:
      approved:
        type: boolean
      bookId:
        type: integer
      commonObjects:
        type: string
      email:
        type: string
      equipment:
        type: string
      filterId:
        type: integer
      meta:
        items:
          type: string
        type: array
      placeAddress:
        type: string
      placeId:
        type: integer
      placeName:
        type: string
      placeServices:
        type: string
      rating:
        type: number
      rentersCount:
        type: integer
      site:
        type: string
      telephoneNumber:
        type: string
      timeFrom:
        type: string
      timeTo:
        type: string
      totalSquare:
        type: number
      userId:
        type: integer
      workingSquare:
        type: number
      workingTime:
        type: string
    type: object
  golang-pkg_internal_places.Place:
    properties:
      approved:
        type: boolean
      commonObjects:
        type: string
      email:
        type: string
      equipment:
        type: string
      filterId:
        type: integer
      meta:
        items:
          type: string
        type: array
      placeAddress:
        type: string
      placeId:
        type: integer
      placeName:
        type: string
      placeServices:
        type: string
      rating:
        type: number
      rentersCount:
        type: integer
      site:
        type: string
      telephoneNumber:
        type: string
      totalSquare:
        type: number
      workingSquare:
        type: number
      workingTime:
        type: string
    type: object
  golang-pkg_internal_user.Landlord:
    properties:
      INN:
        type: string
      email:
        type: string
      legal_entity:
        type: string
      name:
        type: string
      patronymic:
        type: string
      phone:
        type: string
      places:
        items:
          type: integer
        type: array
      post:
        type: string
      surname:
        type: string
    type: object
  golang-pkg_internal_user.User:
    properties:
      email:
        type: string
      name:
        type: string
      patronymic:
        type: string
      phone:
        type: string
      surname:
        type: string
    type: object
  internal.HackError:
    properties:
      code:
        type: integer
      err: {}
      message:
        type: string
      timestamp:
        type: string
    type: object
host: 37.18.110.184:3000
info:
  contact: {}
  description: Документация API
  title: Hack
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Получение всех мест и отображение их на странице
      operationId: GetPlaces
      parameters:
      - description: ID фильтра
        in: header
        name: Filterid
        type: string
      - description: Дата бронирования
        in: header
        name: Date
        type: string
      - description: Страница для пагинации
        in: header
        name: Page
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/golang-pkg_internal_places.Place'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Получение всех мест
      tags:
      - places
  /admin/deleteAdminProfile/id/:userId:
    put:
      description: Удаление аккаунта не админиистратора
      operationId: deleteAdminProfile
      parameters:
      - description: ИД администратора
        in: header
        name: userId
        required: true
        type: string
      - description: Уровень администратора, где 0-не админ, 1 - админ младщего звена,
          3 - старший админ
        in: header
        name: adminLevel
        required: true
        type: integer
      - description: Ид пользователя, которого назначают администратором
        in: path
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal.HackError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal.HackError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      security:
      - ApiKeyAuth: []
      summary: Удаление аккаунта администратора
      tags:
      - Admin
  /admin/deleteProfile/id/:userId:
    put:
      description: Удаление аккаунта не админиистратора
      operationId: deleteProfile
      parameters:
      - description: ИД администратора
        in: header
        name: userId
        required: true
        type: string
      - description: Уровень администратора, где 0-не админ, 1 - админ младщего звена,
          3 - старший админ
        in: header
        name: adminLevel
        required: true
        type: integer
      - description: Ид пользователя, которого назначают администратором
        in: path
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal.HackError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal.HackError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      security:
      - ApiKeyAuth: []
      summary: Удаление аккаунта
      tags:
      - Admin
  /admin/promotionAdmin/id/:userId:
    put:
      description: Повышение уровня администратора
      operationId: promotionAdmin
      parameters:
      - description: ИД администратора
        in: header
        name: userId
        required: true
        type: string
      - description: Уровень администратора, где 0-не админ, 1 - админ младщего звена,
          3 - старший админ
        in: header
        name: adminLevel
        required: true
        type: integer
      - description: Ид пользователя, которого назначают администратором
        in: path
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal.HackError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal.HackError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      security:
      - ApiKeyAuth: []
      summary: Повышение уровня администратора
      tags:
      - Admin
  /admin/setAdmin/id/:userId:
    put:
      description: Авторизировать пользователя
      operationId: setAdmin
      parameters:
      - description: ИД администратора
        in: header
        name: userId
        required: true
        type: string
      - description: Уровень администратора, где 0-не админ, 1 - админ младщего звена,
          3 - старший админ
        in: header
        name: adminLevel
        required: true
        type: integer
      - description: Ид пользователя, которого назначают администратором
        in: path
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal.HackError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal.HackError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      security:
      - ApiKeyAuth: []
      summary: Назначение администратора
      tags:
      - Admin
  /admin/usSetAdmin/id/:userId:
    put:
      description: Снятие с поста администратора
      operationId: unSetAdmin
      parameters:
      - description: ИД администратора
        in: header
        name: userId
        required: true
        type: string
      - description: Уровень администратора, где 0-не админ, 1 - админ младщего звена,
          3 - старший админ
        in: header
        name: adminLevel
        required: true
        type: integer
      - description: Ид пользователя, которого назначают администратором
        in: path
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal.HackError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal.HackError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      security:
      - ApiKeyAuth: []
      summary: Снятие с поста администратора
      tags:
      - Admin
  /adminPlaces/placeForApproving:
    get:
      description: Получить не подтверждённые места
      operationId: GetNotApprovedPlace
      parameters:
      - description: Является админом(true/false)
        in: header
        name: Isadmin
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/golang-pkg_internal_places.Place'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Получить не подтверждённые места
      tags:
      - Admin
    put:
      description: Подтвердить место
      operationId: MakeApproved
      parameters:
      - description: Является админом(true/false)
        in: header
        name: Isadmin
        type: string
      - description: Подтверждение места
        in: body
        name: Place
        schema:
          $ref: '#/definitions/golang-pkg_internal_places.Approving'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/golang-pkg_internal_places.Place'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Подтвердить место
      tags:
      - Admin
  /auth/businessRegister:
    post:
      description: Регистрация пользователя
      operationId: landlordRegister
      parameters:
      - description: Данные для регистрации
        in: body
        name: regDate
        required: true
        schema:
          $ref: '#/definitions/golang-pkg_internal_auth.BusinessUserForRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/golang-pkg_internal_auth.BusinessUserForRegister'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal.HackError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      summary: Регистрация арендодателя
      tags:
      - auth
  /auth/login:
    post:
      description: Авторизировать пользователя
      operationId: login
      parameters:
      - description: Данные для входа
        in: body
        name: loginDate
        required: true
        schema:
          $ref: '#/definitions/golang-pkg_internal_auth.UserForLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal.HackError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      summary: Авторизация
      tags:
      - auth
  /auth/o2auth/Sber:
    post:
      description: Регистрация пользователя -> Заглушка
      operationId: loginWithSber
      responses:
        "404":
          description: Not Found
          schema: {}
      summary: Вход через Sber
      tags:
      - auth
  /auth/o2auth/Tinkoff:
    post:
      description: Регистрация пользователя -> Заглушка
      operationId: loginWithTinkoff
      responses:
        "404":
          description: Not Found
          schema: {}
      summary: Вход через Tinkoff
      tags:
      - auth
  /auth/o2auth/gos:
    post:
      description: Регистрация пользователя -> Заглушка
      operationId: loginWithGos
      responses:
        "404":
          description: Not Found
          schema: {}
      summary: Вход через госуслуги
      tags:
      - auth
  /auth/o2auth/svk:
    post:
      description: Регистрация пользователя -> Заглушка
      operationId: loginWithVK
      responses:
        "404":
          description: Not Found
          schema: {}
      summary: Вход через VK
      tags:
      - auth
  /auth/register:
    post:
      description: Регистрация пользователя
      operationId: register
      parameters:
      - description: Данные для регистрации
        in: body
        name: regDate
        required: true
        schema:
          $ref: '#/definitions/golang-pkg_internal_auth.UserForRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/golang-pkg_internal_auth.UserForRegister'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal.HackError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      summary: Регистрация
      tags:
      - auth
  /getUserInfo:
    get:
      description: На вход получаю токен в хедере Authorization
      operationId: UserIdentification
      parameters:
      - description: bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      summary: Проверка токена
      tags:
      - auth
  /landlord/info:
    get:
      description: Получение информации о пользователе (ФИО, номер, почта, должность,
        его места, ЮР лицо, ИНН)
      operationId: getLandlord
      parameters:
      - description: ИД пользователя
        in: header
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/golang-pkg_internal_user.Landlord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal.HackError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal.HackError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      security:
      - ApiKeyAuth: []
      summary: Получение информации о пользователе
      tags:
      - Landlord
  /myOrders:
    get:
      description: возвращение всех бронирований пользователя
      operationId: GetMyOrders
      parameters:
      - description: ID пользователя
        in: header
        name: Userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/golang-pkg_internal_places.Calendar'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Вывод свох бронирований
      tags:
      - Ownner
  /place/chooseFilter:
    get:
      description: Получить полных список фильтров
      operationId: GetAllFilters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/golang-pkg_internal_places.Filter'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal.HackError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal.HackError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      security:
      - ApiKeyAuth: []
      summary: Получить полных список фильтров
      tags:
      - places
  /place/createFilter:
    post:
      consumes:
      - application/json
      description: Создание нового фильтра и возврат обновленного списка фильтров
      operationId: CreateFilter
      parameters:
      - description: Является админом(true/false)
        in: header
        name: Isadmin
        type: string
      - description: Json для создания фильтра
        in: body
        name: Filter
        required: true
        schema:
          $ref: '#/definitions/golang-pkg_internal_places.Filter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/golang-pkg_internal_places.Filter'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Создание нового фильтра
      tags:
      - places
  /place/createOrder:
    post:
      description: Создание бронирования и получение списка заказов у конкретного
        места
      operationId: CreateOrder
      parameters:
      - description: Json для создания брони
        in: body
        name: Order
        required: true
        schema:
          $ref: '#/definitions/golang-pkg_internal_places.Filter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/golang-pkg_internal_places.Calendar'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Создание бронирования
      tags:
      - places
  /place/createPlace:
    post:
      consumes:
      - application/json
      description: Создание нового места и возврат этого места
      operationId: CreatePlace
      parameters:
      - description: Является лэндлордом(true/false)
        in: header
        name: Islandlord
        type: string
      - description: ID пользователя
        in: header
        name: Userid
        type: string
      - description: Json для создания места
        in: body
        name: Place
        required: true
        schema:
          $ref: '#/definitions/golang-pkg_internal_places.Place'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/golang-pkg_internal_places.Place'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Создание нового места
      tags:
      - places
  /place/curent:
    get:
      description: получение конкретного места по id
      operationId: GetOnePlace
      parameters:
      - description: ID места
        in: query
        name: placeId
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/golang-pkg_internal_places.Place'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Получение конкретного места
      tags:
      - places
  /place/curent/comments:
    get:
      description: Получить оценку
      operationId: GetComment
      parameters:
      - description: ID места
        in: query
        name: placeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/golang-pkg_internal_places.Comment'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Посмотреть оценки
      tags:
      - places
  /place/curent/comments/createComment:
    post:
      description: Оставить комментарий и поставить оценку
      operationId: CreateComment
      parameters:
      - description: ID места
        in: query
        name: placeId
        required: true
        type: string
      - description: ID пользователя
        in: header
        name: Userid
        required: true
        type: string
      - description: ID пользователя
        in: body
        name: Comment
        required: true
        schema:
          $ref: '#/definitions/golang-pkg_internal_places.CommentMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/golang-pkg_internal_places.Comment'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Оставить отзыв
      tags:
      - places
  /place/delFilter:
    delete:
      description: удаление фильтра по ID. Доступно только админам
      operationId: DeleteFilter
      parameters:
      - description: ID фильтра
        in: query
        name: filterId
        type: string
      - description: Является админом(true/false)
        in: header
        name: Isadmin
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Удаление фильтра
      tags:
      - places
  /place/delPlace:
    delete:
      description: удаление места. Доступно лендлордам и админам
      operationId: DeletePlace
      parameters:
      - description: ID места
        in: query
        name: placeId
        type: string
      - description: Является лэндлордом(true/false)
        in: header
        name: Islandlord
        type: string
      - description: Является админом(true/false)
        in: header
        name: Isadmin
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Удаление конкретного места
      tags:
      - places
  /place/myOrders/cancelOrder:
    delete:
      description: отмена бронирования пользователем по orderId и Userid
      operationId: CancelOrder
      parameters:
      - description: ID фильтра
        in: query
        name: orderId
        type: string
      - description: ID пользователя
        in: header
        name: Userid
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Отмена бронирования пользователем
      tags:
      - places
  /place/myPlace:
    get:
      description: вывод собственных мест для лендлорда
      operationId: GetMyPlaces
      parameters:
      - description: ID пользователя
        in: header
        name: Userid
        required: true
        type: string
      - description: Является лэндлордом(true/false)
        in: header
        name: Islandlord
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/golang-pkg_internal_places.LandPlace'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Вывод свох мест
      tags:
      - Ownner
  /place/searchPlace:
    get:
      description: Поиск мест по его названию
      operationId: SearchPlace
      parameters:
      - description: Название места
        in: query
        name: placeName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/golang-pkg_internal_places.Place'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Поиск мест
      tags:
      - places
  /place/updatePlace:
    put:
      description: Обновление параметров места
      operationId: UpdatePlace
      parameters:
      - description: Json для обновления места
        in: body
        name: Order
        required: true
        schema:
          $ref: '#/definitions/golang-pkg_internal_places.Place'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Обновление параметров места
      tags:
      - places
  /places/getPlaceLikesCount:
    get:
      description: Добавить место в избранное
      operationId: GetPlaceLikeCount
      parameters:
      - description: ID места
        in: query
        name: placeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: int
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Получить количество лайков у места
      tags:
      - places
  /places/isLiked:
    get:
      description: Проверить лайкнуто или нете
      operationId: IsLiked
      parameters:
      - description: ID места
        in: query
        name: placeId
        required: true
        type: string
      - description: ID пользоватя
        in: query
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Проверить лайкнуто или нет
      tags:
      - places
  /places/like:
    post:
      description: Добавить место в избранное
      operationId: CreateLike
      parameters:
      - description: ID места
        in: query
        name: placeId
        required: true
        type: string
      - description: ID пользователя
        in: query
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Добавить место в избранное
      tags:
      - places
  /user/info:
    get:
      description: Получение информации о пользователе (ФИО, номер, почта)
      operationId: getUser
      parameters:
      - description: ИД пользователя
        in: header
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/golang-pkg_internal_user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal.HackError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal.HackError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal.HackError'
      security:
      - ApiKeyAuth: []
      summary: Получение информации о пользователе
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
